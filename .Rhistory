toxigen_knn_ablations %>% filter(
Metric == "F1"
) %>% filter(
n_neighbors %in% c(1, 3, 5, 7, 9)
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
scale_x_continuous(labels = c(1, 3, 5, 7, 9), breaks = c(1, 3, 5, 7, 9), name = "K") +
scale_y_continuous(name = "F1") +
scale_color_brewer(palette="Dark2") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Accuracy"
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
# (position="dodge", stat="identity", aes(shape=weights)) +
scale_color_brewer(palette="Dark2") +
scale_x_continuous(name = "K") +
scale_y_continuous(name = "F1") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Accuracy"
) %>% filter(
n_neighbors %in% c(1, 3, 5, 7, 9)
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
scale_x_continuous(labels = c(1, 3, 5, 7, 9), breaks = c(1, 3, 5, 7, 9), name = "K") +
scale_y_continuous(name = "F1") +
scale_color_brewer(palette="Dark2") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Recall"
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
# (position="dodge", stat="identity", aes(shape=weights)) +
scale_color_brewer(palette="Dark2") +
scale_x_continuous(name = "K") +
scale_y_continuous(name = "F1") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Recall"
) %>% filter(
n_neighbors %in% c(1, 3, 5, 7, 9)
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
scale_x_continuous(labels = c(1, 3, 5, 7, 9), breaks = c(1, 3, 5, 7, 9), name = "K") +
scale_y_continuous(name = "F1") +
scale_color_brewer(palette="Dark2") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Precision"
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
# (position="dodge", stat="identity", aes(shape=weights)) +
scale_color_brewer(palette="Dark2") +
scale_x_continuous(name = "K") +
scale_y_continuous(name = "F1") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Precision"
) %>% filter(
n_neighbors %in% c(1, 3, 5, 7, 9)
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
scale_x_continuous(labels = c(1, 3, 5, 7, 9), breaks = c(1, 3, 5, 7, 9), name = "K") +
scale_y_continuous(name = "F1") +
scale_color_brewer(palette="Dark2") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Accuracy"
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
# (position="dodge", stat="identity", aes(shape=weights)) +
scale_color_brewer(palette="Dark2") +
scale_x_continuous(name = "K") +
scale_y_continuous(name = "Accuracy") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Accuracy"
) %>% filter(
n_neighbors %in% c(1, 3, 5, 7, 9)
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
scale_x_continuous(labels = c(1, 3, 5, 7, 9), breaks = c(1, 3, 5, 7, 9), name = "K") +
scale_y_continuous(name = "Accuracy") +
scale_color_brewer(palette="Dark2") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Recall"
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
# (position="dodge", stat="identity", aes(shape=weights)) +
scale_color_brewer(palette="Dark2") +
scale_x_continuous(name = "K") +
scale_y_continuous(name = "Recall") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Recall"
) %>% filter(
n_neighbors %in% c(1, 3, 5, 7, 9)
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
scale_x_continuous(labels = c(1, 3, 5, 7, 9), breaks = c(1, 3, 5, 7, 9), name = "K") +
scale_y_continuous(name = "Recall") +
scale_color_brewer(palette="Dark2") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Precision"
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
# (position="dodge", stat="identity", aes(shape=weights)) +
scale_color_brewer(palette="Dark2") +
scale_x_continuous(name = "K") +
scale_y_continuous(name = "Precision") +
geom_line() +
geom_point() +
theme_cowplot()
toxigen_knn_ablations %>% filter(
Metric == "Precision"
) %>% filter(
n_neighbors %in% c(1, 3, 5, 7, 9)
) %>%
filter() %>%
ggplot() + aes(x = n_neighbors, y = value, color = Model, fill = Model, linetype = Weight, shape = Weight) +
scale_x_continuous(labels = c(1, 3, 5, 7, 9), breaks = c(1, 3, 5, 7, 9), name = "K") +
scale_y_continuous(name = "Precision") +
scale_color_brewer(palette="Dark2") +
geom_line() +
geom_point() +
theme_cowplot()
esnli_whitebox_results <- read_csv("esnli_partial_results.csv", show_col_types = FALSE) %>% pivot_longer(
c(predict_accuracy, predict_f1, predict_precision, predict_recall), names_to = 'metric'
) %>%
mutate(Model = make_string_pretty(Model)) %>%
mutate(metric = gsub("predict_", "", metric)) %>%
mutate(metric = make_string_pretty(metric)) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Precision", "Recall", "F1"))) %>%
mutate(value = round(value, 4)*100)
esnli_whitebox_results <- read_csv("esnli_partial_results.csv", show_col_types = FALSE) %>% pivot_longer(
c(predict_accuracy, predict_macro_f1, predict_macro_precision, predict_macro_recall), names_to = 'metric'
) %>%
mutate(Model = make_string_pretty(Model)) %>%
mutate(metric = gsub("predict_", "", metric)) %>%
mutate(metric = make_string_pretty(metric)) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Precision", "Recall", "F1"))) %>%
mutate(value = round(value, 4)*100)
esnli_whitebox_results
esnli_whitebox_results
esnli_whitebox_results <- read_csv("esnli_partial_results.csv", show_col_types = FALSE) %>%
select(Model, Whitebox, predict_accuracy, predict_macro_f1, predict_macro_precision, predict_macro_recall) %>%
pivot_longer(
c(predict_accuracy, predict_macro_f1, predict_macro_precision, predict_macro_recall), names_to = 'metric'
) %>%
mutate(Model = make_string_pretty(Model)) %>%
mutate(metric = gsub("predict_", "", metric)) %>%
mutate(metric = make_string_pretty(metric)) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Precision", "Recall", "F1"))) %>%
mutate(value = round(value, 4)*100)
esnli_whitebox_results
esnli_whitebox_results
read_csv("esnli_partial_results.csv", show_col_types = FALSE) %>%
select(Model, Whitebox, predict_accuracy, predict_macro_f1, predict_macro_precision, predict_macro_recall) %>%
pivot_longer(
c(predict_accuracy, predict_macro_f1, predict_macro_precision, predict_macro_recall), names_to = 'metric'
)
esnli_whitebox_results <- read_csv("esnli_partial_results.csv", show_col_types = FALSE) %>%
select(Model, Whitebox, predict_accuracy, predict_macro_f1, predict_macro_precision, predict_macro_recall) %>%
pivot_longer(
c(predict_accuracy, predict_macro_f1, predict_macro_precision, predict_macro_recall), names_to = 'metric'
) %>%
mutate(Model = make_string_pretty(Model)) %>%
mutate(metric = gsub("predict_", "", metric)) %>%
mutate(metric = make_string_pretty(metric)) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Macro Precision", "Macro Recall", "Macro F1"))) %>%
mutate(value = round(value, 4)*100)
esnli_whitebox_results
esnli_whitebox_results
esnli_whitebox_results %>% filter(
Whitebox %in% c("SVM", "Decision Tree", "KNN", "Stacked")
) %>% mutate(
Whitebox = factor(Whitebox,levels=c("KNN", "SVM", "Decision Tree", "Stacked"))
) %>%
ggplot() + aes(x = reorder(Model, value), y = value) +
coord_flip() +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), add = c(0, 0)),
limits = c(0, 100), name="Percentage") +
scale_x_discrete(name = "Encodings", labels = str_to_title) +
scale_fill_brewer(palette = "Set1") +
geom_text(aes(label=round(value, 3)),
position=position_dodge(width=0.9), vjust=0.25, hjust = -0.3, size=5) +
geom_hline(data=dl_baselines, aes(yintercept=value, color=factor(Model)), linetype="dashed") +
scale_color_brewer(palette = "Dark2", name = "Original Model Performance") +
facet_grid(metric ~ factor(Whitebox)) +
# facet_wrap(~Layers_Used, nrow = 1) +
theme_cowplot(font_size = 20) +
panel_border() +
theme(legend.position = "top", panel.spacing = unit(1, "lines"))
esnli_whitebox_results %>% filter(
Whitebox %in% c("SVM", "Decision Tree", "KNN", "Stacked")
) %>% mutate(
Whitebox = factor(Whitebox,levels=c("KNN", "SVM", "Decision Tree", "Stacked"))
) %>%
ggplot() + aes(x = reorder(Model, value), y = value) +
coord_flip() +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), add = c(0, 0)),
limits = c(0, 100), name="Percentage") +
scale_x_discrete(name = "Encodings", labels = str_to_title) +
scale_fill_brewer(palette = "Set1") +
# geom_text(aes(label=round(value, 3)),
#           position=position_dodge(width=0.9), vjust=0.25, hjust = -0.3, size=5) +
# geom_hline(data=dl_baselines, aes(yintercept=value, color=factor(Model)), linetype="dashed") +
scale_color_brewer(palette = "Dark2", name = "Original Model Performance") +
facet_grid(metric ~ factor(Whitebox)) +
# facet_wrap(~Layers_Used, nrow = 1) +
theme_cowplot(font_size = 20) +
panel_border() +
theme(legend.position = "top", panel.spacing = unit(1, "lines"))
esnli_whitebox_results %>% filter(
Whitebox %in% c("SVM", "Decision Tree", "KNN", "Stacked")
) %>% mutate(
Whitebox = factor(Whitebox,levels=c("KNN", "SVM", "Decision Tree", "Stacked"))
) %>%
ggplot() + aes(x = reorder(Model, value), y = value) +
coord_flip() +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), add = c(0, 0)),
limits = c(0, 100), name="Percentage") +
scale_x_discrete(name = "Encodings", labels = str_to_title) +
scale_fill_brewer(palette = "Set1") +
geom_text(aes(label=round(value, 3)),
position=position_dodge(width=0.9), vjust=0.25, hjust = -0.3, size=5) +
# geom_hline(data=dl_baselines, aes(yintercept=value, color=factor(Model)), linetype="dashed") +
scale_color_brewer(palette = "Dark2", name = "Original Model Performance") +
facet_grid(metric ~ factor(Whitebox)) +
# facet_wrap(~Layers_Used, nrow = 1) +
theme_cowplot(font_size = 20) +
panel_border() +
theme(legend.position = "top", panel.spacing = unit(1, "lines"))
results <- read_csv(file=file.path(getwd(), "compiled_results_toxigen.csv"), show_col_types = FALSE) %>%
mutate(prediction_method = ifelse(prediction_method == "normal", "Standard", prediction_method)) %>%
transform(prediction_method = factor(str_to_title(prediction_method), levels = c("Standard", "Nonconformal", "Conformal")),
layers_to_save_desc = factor(layers_to_save_desc,
levels = c("All", "Embedding Only", "Embedding + Last", "Last Only")),
poolers_to_use_desc = factor(poolers_to_use_desc, levels = c("mean_with_attention",
"mean_with_attention_and_cls")),
dist_to_weight_fct = factor(make_string_pretty(dist_to_weight_fct), levels=c("Uniform", "Inverse",
"Inverse Squared")),
K = as.factor(K)) %>%
arrange(Model, prediction_method, layers_to_save_desc, poolers_to_use_desc, K, dist_to_weight_fct)
dl_baselines <- results %>%
filter(prediction_method == "Standard") %>%
select(Model, predict_accuracy, predict_f1, predict_precision, predict_recall) %>%
pivot_longer(c(predict_accuracy, predict_f1, predict_precision, predict_recall),
names_to = 'metric') %>%
mutate(value = as.numeric(round(as.numeric(value), 4)*100)) %>%
mutate_if(is.character, make_string_pretty) %>%
mutate_if(is.character, function(x) {return(gsub("Predict ", "", x))}) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Precision", "Recall", "F1"))) %>%
slice(rep(1:n(), each = 4)) %>%
mutate(Whitebox = rep(c("KNN", "SVM", "Decision Tree", "Stacked"), nrow(.) / 4))
toxigen_whitebox_results <- rbind.fill(toxigen_whitebox_results, dl_baselines)
toxigen_whitebox_results <- read_csv("toxigen_whitebox_results.csv", show_col_types = FALSE) %>% pivot_longer(
c(predict_accuracy, predict_f1, predict_precision, predict_recall), names_to = 'metric'
) %>%
mutate(Model = make_string_pretty(Model)) %>%
mutate(metric = gsub("predict_", "", metric)) %>%
mutate(metric = make_string_pretty(metric)) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Precision", "Recall", "F1"))) %>%
mutate(value = round(value, 4)*100)
toxigen_whitebox_results
results <- read_csv(file=file.path(getwd(), "compiled_results_toxigen.csv"), show_col_types = FALSE) %>%
mutate(prediction_method = ifelse(prediction_method == "normal", "Standard", prediction_method)) %>%
transform(prediction_method = factor(str_to_title(prediction_method), levels = c("Standard", "Nonconformal", "Conformal")),
layers_to_save_desc = factor(layers_to_save_desc,
levels = c("All", "Embedding Only", "Embedding + Last", "Last Only")),
poolers_to_use_desc = factor(poolers_to_use_desc, levels = c("mean_with_attention",
"mean_with_attention_and_cls")),
dist_to_weight_fct = factor(make_string_pretty(dist_to_weight_fct), levels=c("Uniform", "Inverse",
"Inverse Squared")),
K = as.factor(K)) %>%
arrange(Model, prediction_method, layers_to_save_desc, poolers_to_use_desc, K, dist_to_weight_fct)
dl_baselines <- results %>%
filter(prediction_method == "Standard") %>%
select(Model, predict_accuracy, predict_f1, predict_precision, predict_recall) %>%
pivot_longer(c(predict_accuracy, predict_f1, predict_precision, predict_recall),
names_to = 'metric') %>%
mutate(value = as.numeric(round(as.numeric(value), 4)*100)) %>%
mutate_if(is.character, make_string_pretty) %>%
mutate_if(is.character, function(x) {return(gsub("Predict ", "", x))}) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Precision", "Recall", "F1"))) %>%
slice(rep(1:n(), each = 4)) %>%
mutate(Whitebox = rep(c("KNN", "SVM", "Decision Tree", "Stacked"), nrow(.) / 4))
toxigen_whitebox_results <- rbind.fill(toxigen_whitebox_results, dl_baselines)
toxigen_whitebox_results %>% mutate(
value = as.numeric(value)
) -> toxigen_whitebox_results
toxigen_whitebox_results
View(dl_baselines)
dl_baselines$value
esnli_og <- c(90.28, 90.27, 90.27, 90.27, 91.75, 91.84, 91.76, 91.78, 90.85,90.82,90.82,90.82)
dl_baselines$value <- (
rep(esnli_og, 4)
)
esnli_whitebox_results %>% filter(
Whitebox %in% c("SVM", "Decision Tree", "KNN", "Stacked")
) %>% mutate(
Whitebox = factor(Whitebox,levels=c("KNN", "SVM", "Decision Tree", "Stacked"))
) %>%
ggplot() + aes(x = reorder(Model, value), y = value) +
coord_flip() +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), add = c(0, 0)),
limits = c(0, 100), name="Percentage") +
scale_x_discrete(name = "Encodings", labels = str_to_title) +
scale_fill_brewer(palette = "Set1") +
geom_text(aes(label=round(value, 3)),
position=position_dodge(width=0.9), vjust=0.25, hjust = -0.3, size=5) +
geom_hline(data=dl_baselines, aes(yintercept=value, color=factor(Model)), linetype="dashed") +
scale_color_brewer(palette = "Dark2", name = "Original Model Performance") +
facet_grid(metric ~ factor(Whitebox)) +
# facet_wrap(~Layers_Used, nrow = 1) +
theme_cowplot(font_size = 20) +
panel_border() +
theme(legend.position = "top", panel.spacing = unit(1, "lines"))
esnli_og <- c(90.28, 90.27, 90.27, 90.27, 91.75, 91.84, 91.76, 91.78, 90.85,90.82,90.82,90.82)
dl_baselines$value <- (
rep(esnli_og, 4)
) %>% rename(
`Macro Precision`=Precision
)
esnli_og <- c(90.28, 90.27, 90.27, 90.27, 91.75, 91.84, 91.76, 91.78, 90.85,90.82,90.82,90.82)
dl_baselines$value <- (
rep(esnli_og, 4)
) %>% dplyr::rename(
`Macro Precision`=Precision
)
source("~/.active-rstudio-document", echo=TRUE)
esnli_og <- c(90.28, 90.27, 90.27, 90.27, 91.75, 91.84, 91.76, 91.78, 90.85,90.82,90.82,90.82)
dl_baselines$value <- (
rep(esnli_og, 4)
) %>% dplyr::rename(
"Macro Precision"=Precision
)
esnli_og <- c(90.28, 90.27, 90.27, 90.27, 91.75, 91.84, 91.76, 91.78, 90.85,90.82,90.82,90.82)
dl_baselines$value <- (
rep(esnli_og, 4)
) %>% dplyr::rename(
"Macro Precision"=Precision
)
esnli_og <- c(90.28, 90.27, 90.27, 90.27, 91.75, 91.84, 91.76, 91.78, 90.85,90.82,90.82,90.82)
dl_baselines$value <- (
rep(esnli_og, 4)
)
dl_baselines %>% dplyr::rename(
`Macro Precision`=Precision
)
dl_baselines
dl_baselines %>% mutate(
metric = ifelse(metric == "Precision", "Macro Precision", metric)
)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.width = 16, fig.height = 9)
library(tidyverse)
library(cowplot)
library(plyr)
make_string_pretty <- function(s) { return(gsub("_", " ", s) %>% str_to_title()) }
toxigen_whitebox_results <- read_csv("toxigen_whitebox_results.csv", show_col_types = FALSE) %>% pivot_longer(
c(predict_accuracy, predict_f1, predict_precision, predict_recall), names_to = 'metric'
) %>%
mutate(Model = make_string_pretty(Model)) %>%
mutate(metric = gsub("predict_", "", metric)) %>%
mutate(metric = make_string_pretty(metric)) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Precision", "Recall", "F1"))) %>%
mutate(value = round(value, 4)*100)
toxigen_whitebox_results
esnli_whitebox_results <- read_csv("esnli_partial_results.csv", show_col_types = FALSE) %>%
select(Model, Whitebox, predict_accuracy, predict_macro_f1, predict_macro_precision, predict_macro_recall) %>%
pivot_longer(
c(predict_accuracy, predict_macro_f1, predict_macro_precision, predict_macro_recall), names_to = 'metric'
) %>%
mutate(Model = make_string_pretty(Model)) %>%
mutate(metric = gsub("predict_", "", metric)) %>%
mutate(metric = make_string_pretty(metric)) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Macro Precision", "Macro Recall", "Macro F1"))) %>%
mutate(value = round(value, 4)*100)
esnli_whitebox_results
results <- read_csv(file=file.path(getwd(), "compiled_results_toxigen.csv"), show_col_types = FALSE) %>%
mutate(prediction_method = ifelse(prediction_method == "normal", "Standard", prediction_method)) %>%
transform(prediction_method = factor(str_to_title(prediction_method), levels = c("Standard", "Nonconformal", "Conformal")),
layers_to_save_desc = factor(layers_to_save_desc,
levels = c("All", "Embedding Only", "Embedding + Last", "Last Only")),
poolers_to_use_desc = factor(poolers_to_use_desc, levels = c("mean_with_attention",
"mean_with_attention_and_cls")),
dist_to_weight_fct = factor(make_string_pretty(dist_to_weight_fct), levels=c("Uniform", "Inverse",
"Inverse Squared")),
K = as.factor(K)) %>%
arrange(Model, prediction_method, layers_to_save_desc, poolers_to_use_desc, K, dist_to_weight_fct)
dl_baselines <- results %>%
filter(prediction_method == "Standard") %>%
select(Model, predict_accuracy, predict_f1, predict_precision, predict_recall) %>%
pivot_longer(c(predict_accuracy, predict_f1, predict_precision, predict_recall),
names_to = 'metric') %>%
mutate(value = as.numeric(round(as.numeric(value), 4)*100)) %>%
mutate_if(is.character, make_string_pretty) %>%
mutate_if(is.character, function(x) {return(gsub("Predict ", "", x))}) %>%
transform(metric = factor(metric, levels = c("Accuracy", "Precision", "Recall", "F1"))) %>%
slice(rep(1:n(), each = 4)) %>%
mutate(Whitebox = rep(c("KNN", "SVM", "Decision Tree", "Stacked"), nrow(.) / 4))
toxigen_whitebox_results <- rbind.fill(toxigen_whitebox_results, dl_baselines)
toxigen_whitebox_results %>% mutate(
value = as.numeric(value)
) -> toxigen_whitebox_results
toxigen_whitebox_results
# filter down to last-layer only
toxigen_whitebox_results %>% filter(
(Layers_Used == "Last Only" & Poolers_Used == 'mean_with_attention') |
!(Model %in% c("Bart-Large", "Flan-T5-Large", "Deberta-Large"))
) %>% filter(
Whitebox %in% c("SVM", "Decision Tree", "KNN", "Stacked")
) %>% filter(
Model != "T5-Large"
) %>% mutate(
Whitebox = factor(Whitebox,levels=c("KNN", "SVM", "Decision Tree", "Stacked"))
) %>%
ggplot() + aes(x = reorder(Model, value), y = value) +
coord_flip() +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), add = c(0, 0)),
limits = c(0, 100), name="Percentage") +
scale_x_discrete(name = "Encodings", labels = str_to_title) +
scale_fill_brewer(palette = "Set1") +
geom_text(aes(label=round(value, 3)),
position=position_dodge(width=0.9), vjust=0.25, hjust = -0.3, size=5) +
geom_hline(data=dl_baselines, aes(yintercept=value, color=factor(Model)), linetype="dashed") +
scale_color_brewer(palette = "Dark2", name = "Original Model Performance") +
facet_grid(metric ~ factor(Whitebox)) +
# facet_wrap(~Layers_Used, nrow = 1) +
theme_cowplot(font_size = 20) +
panel_border() +
theme(legend.position = "top", panel.spacing = unit(1, "lines"))
esnli_og <- c(90.28, 90.27, 90.27, 90.27, 91.75, 91.84, 91.76, 91.78, 90.85,90.82,90.82,90.82)
dl_baselines$value <- (
rep(esnli_og, 4)
)
dl_baselines %>% mutate(
metric = ifelse(metric == "Precision", "Macro Precision",
ifelse(metric == "Recall", "Macro Recall",
ifelse(metric == "F1", "Macro F1", "Accuracy")))
) -> dl_baselines
dl_baselines
esnli_whitebox_results %>% filter(
Whitebox %in% c("SVM", "Decision Tree", "KNN", "Stacked")
) %>% mutate(
Whitebox = factor(Whitebox,levels=c("KNN", "SVM", "Decision Tree", "Stacked"))
) %>%
ggplot() + aes(x = reorder(Model, value), y = value) +
coord_flip() +
geom_bar(position="dodge", stat="identity") +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), add = c(0, 0)),
limits = c(0, 100), name="Percentage") +
scale_x_discrete(name = "Encodings", labels = str_to_title) +
scale_fill_brewer(palette = "Set1") +
geom_text(aes(label=round(value, 3)),
position=position_dodge(width=0.9), vjust=0.25, hjust = -0.3, size=5) +
geom_hline(data=dl_baselines, aes(yintercept=value, color=factor(Model)), linetype="dashed") +
scale_color_brewer(palette = "Dark2", name = "Original Model Performance") +
facet_grid(metric ~ factor(Whitebox)) +
# facet_wrap(~Layers_Used, nrow = 1) +
theme_cowplot(font_size = 20) +
panel_border() +
theme(legend.position = "top", panel.spacing = unit(1, "lines"))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.width = 16, fig.height = 9)
library(tidyverse)
library(cowplot)
library(plyr)
make_string_pretty <- function(s) { return(gsub("_", " ", s) %>% str_to_title()) }
